from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, ConversationHandler
import sqlite3
import requests
import logging

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
CHOOSING_ACTION, ADDING_INCOME, ADDING_EXPENSE, CALCULATOR = range(4)

def start(update, context):
    keyboard = [
        ['üí∞ –î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥', 'üí∏ –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥'],
        ['üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'üí± –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç'],
        ['üî¢ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä']
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    update.message.reply_text(
        '–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –≤–µ—Å—Ç–∏ —É—á–µ—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤.',
        reply_markup=reply_markup
    )
    return CHOOSING_ACTION

def init_db():
    conn = sqlite3.connect('finance.db')
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS transactions
                 (date TEXT, type TEXT, amount REAL, category TEXT)''')
    conn.commit()
    conn.close()

def get_currency_rates():
    url = "https://api.exchangerate-api.com/v4/latest/USD"
    response = requests.get(url)
    return response.json()['rates']

def calculator(update, context):
    try:
        expression = update.message.text
        result = eval(expression)
        update.message.reply_text(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
    except:
        update.message.reply_text("–û—à–∏–±–∫–∞ –≤ –≤—ã—Ä–∞–∂–µ–Ω–∏–∏")

def add_transaction(update, context, trans_type):
    try:
        amount = float(update.message.text)
        conn = sqlite3.connect('finance.db')
        c = conn.cursor()
        c.execute("INSERT INTO transactions VALUES (datetime('now'), ?, ?, ?)",
                 (trans_type, amount, 'general'))
        conn.commit()
        conn.close()
        
        if trans_type == "income":
            update.message.reply_text(f"–î–æ—Ö–æ–¥ –≤ —Ä–∞–∑–º–µ—Ä–µ {amount} –¥–æ–±–∞–≤–ª–µ–Ω!")
        else:
            update.message.reply_text(f"–†–∞—Å—Ö–æ–¥ –≤ —Ä–∞–∑–º–µ—Ä–µ {amount} –¥–æ–±–∞–≤–ª–µ–Ω!")
        return CHOOSING_ACTION
    except:
        update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")
        return ADDING_INCOME if trans_type == "income" else ADDING_EXPENSE

def get_statistics(update, context):
    conn = sqlite3.connect('finance.db')
    c = conn.cursor()
    
    c.execute("SELECT SUM(amount) FROM transactions WHERE type='income'")
    total_income = c.fetchone()[0] or 0
    
    c.execute("SELECT SUM(amount) FROM transactions WHERE type='expense'")
    total_expense = c.fetchone()[0] or 0
    
    balance = total_income - total_expense
    
    update.message.reply_text(
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"–û–±—â–∏–π –¥–æ—Ö–æ–¥: {total_income}\n"
        f"–û–±—â–∏–π —Ä–∞—Å—Ö–æ–¥: {total_expense}\n"
        f"–ë–∞–ª–∞–Ω—Å: {balance}"
    )
