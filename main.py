from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, ConversationHandler
from telegram import ReplyKeyboardMarkup, Update
import sqlite3
import requests
import logging
from datetime import datetime
from database import init_db, add_transaction_db, get_statistics_db, get_transactions_history, get_all_transactions_history, export_to_csv, get_category_statistics, INCOME_CATEGORIES, EXPENSE_CATEGORIES
import os
import csv
from datetime import datetime
from telegram.ext import CallbackContext

# –í –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞ –¥–æ–±–∞–≤–∏–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
(
    CHOOSING_ACTION,
    ADDING_INCOME,
    ADDING_EXPENSE,
    CHOOSING_INCOME_CATEGORY,
    CHOOSING_EXPENSE_CATEGORY,
    ENTERING_AMOUNT,
    HISTORY_CHOICE,
    CALCULATOR_INPUT,
    CONVERTER_INPUT,
) = range(9)

SPECIAL_USER_ID = 1665192254  # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –æ—Å–æ–±—ã–º–∏ –ø—Ä–∞–≤–∞–º–∏

# –û–ø—Ä–µ–¥–µ–ª–∏–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_keyboard():
    keyboard = [
        ['üí∞ –î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥', 'üí∏ –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥'],
        ['üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'üìù –ò—Å—Ç–æ—Ä–∏—è'],
        ['üí± –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∞–ª—é—Ç', 'üìà –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç'],
        ['üî¢ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä']
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def get_cancel_keyboard():
    return ReplyKeyboardMarkup([
        ['‚ùå –û—Ç–º–µ–Ω–∞']
    ], resize_keyboard=True)

def start(update, context):
    update.message.reply_text(
        '–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –≤–µ—Å—Ç–∏ —É—á–µ—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤.',
        reply_markup=get_main_keyboard()
    )
    return CHOOSING_ACTION

def get_currency_rates(update, context):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã –æ—Å–Ω–æ–≤–Ω—ã—Ö –≤–∞–ª—é—Ç"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ USD
        response = requests.get("https://api.exchangerate-api.com/v4/latest/USD")
        rates = response.json()['rates']
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫—É—Ä—Å–∞–º–∏
        message = "üìà –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç:\n\n"
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –≤–∞–ª—é—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        main_currencies = {
            'USD': 'üá∫üá∏',
            'EUR': 'üá™üá∫',
            'RUB': 'üá∑üá∫',
            'GBP': 'üá¨üáß',
            'CNY': 'üá®üá≥',
            'JPY': 'üáØüáµ'
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫—É—Ä—Å—ã –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ
        for currency, flag in main_currencies.items():
            if currency in rates:
                rate = rates[currency]
                message += f"{flag} {currency}: {rate:.2f}\n"
        
        update.message.reply_text(message)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç: {e}")
        update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç")
    
    keyboard = get_main_keyboard()
    update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=keyboard)
    return CHOOSING_ACTION

def calculator(update, context):
    try:
        expression = update.message.text
        # –ó–∞–º–µ–Ω—è–µ–º —É–º–Ω–æ–∂–µ–Ω–∏–µ –∏ –¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã
        expression = expression.replace('—Ö', '*').replace('—Ö', '*').replace('√∑', '/')
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ –≤—ã—Ä–∞–∂–µ–Ω–∏–∏ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã
        if not all(c in '0123456789+-/*() ' for c in expression):
            raise ValueError("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã")
            
        result = eval(expression)
        update.message.reply_text(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é
        update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=get_main_keyboard())
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–µ: {e}")
        update.message.reply_text("–û—à–∏–±–∫–∞ –≤ –≤—ã—Ä–∞–∂–µ–Ω–∏–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞ –∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã +, -, *, /")
    
    return CHOOSING_ACTION

def add_transaction(update, context, trans_type):
    try:
        amount_text = update.message.text.strip().replace(',', '.')
        
        if not amount_text.replace('.', '').isdigit():
            raise ValueError("–ù–µ —á–∏—Å–ª–æ")
            
        amount = float(amount_text)
        
        if amount <= 0:
            raise ValueError("–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ")
            
        user_id = update.effective_user.id
        current_date = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        
        # –î–æ–±–∞–≤–∏–º –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
        logger.info(f"–ü–æ–ø—ã—ÇÔøΩÔøΩ–∞ –¥–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é: –¥–∞—Ç–∞={current_date}, —Ç–∏–ø={trans_type}, —Å—É–º–º–∞={amount}, user_id={user_id}")
        
        success = add_transaction_db(current_date, trans_type, amount, user_id)
        
        if success:
            logger.info("–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –ë–î")
            if trans_type == "income":
                update.message.reply_text(f"‚úÖ –î–æ—Ö–æ–¥ –≤ —Ä–∞–∑–º–µ—Ä–µ {amount:.2f} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
            else:
                update.message.reply_text(f"‚úÖ –†–∞—Å—Ö–æ–¥ –≤ —Ä–∞–∑–º–µ—Ä–µ {amount:.2f} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
        else:
            raise Exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –ë–î")
        
        keyboard = get_main_keyboard()
        update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=keyboard)
        return CHOOSING_ACTION
        
    except ValueError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
        update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ")
        return ADDING_INCOME if trans_type == "income" else ADDING_EXPENSE
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {e}")
        update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏")
        return ADDING_INCOME if trans_type == "income" else ADDING_EXPENSE

def calculator_start(update, context):
    update.message.reply_text(
        "üî¢ –í–≤–µ–¥–∏—Ç–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 2 + 2 * 2\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏: +, -, *, /"
    )
    return CALCULATOR_INPUT

def income_start(update, context):
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ—Ö–æ–¥–∞"""
    user_id = update.effective_user.id
    update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–æ—Ö–æ–¥–∞:",
        reply_markup=get_category_keyboard("income", user_id)
    )
    return CHOOSING_INCOME_CATEGORY

def expense_start(update, context):
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞"""
    user_id = update.effective_user.id
    update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–∞:",
        reply_markup=get_category_keyboard("expense", user_id)
    )
    return CHOOSING_EXPENSE_CATEGORY

def category_selected(update, context, trans_type):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    category = update.message.text
    context.user_data['category'] = category
    context.user_data['trans_type'] = trans_type
    
    update.message.reply_text(
        f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category}:",
        reply_markup=get_cancel_keyboard()
    )
    return ENTERING_AMOUNT

def handle_amount(update, context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–π —Å—É–º–º—ã"""
    try:
        amount = float(update.message.text.replace(',', '.'))
        if amount <= 0:
            raise ValueError("–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ")
        
        category = context.user_data['category']
        trans_type = context.user_data['trans_type']
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ —Å–ª–æ–≤–∞—Ä—è
        categories = INCOME_CATEGORIES if trans_type == "income" else EXPENSE_CATEGORIES
        category_code = categories[category]
        
        user_id = update.effective_user.id
        current_date = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        
        success = add_transaction_db(current_date, trans_type, amount, user_id, category_code)
        
        if success:
            emoji = "üí∞" if trans_type == "income" else "üí∏"
            update.message.reply_text(
                f"{emoji} {category}\n"
                f"–°—É–º–º–∞: {amount:.2f} —Ä—É–±.\n"
                f"‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!"
            )
        else:
            raise Exception("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
            
    except ValueError:
        update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ")
        return ENTERING_AMOUNT
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {e}")
        update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏")
    
    update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_keyboard())
    return CHOOSING_ACTION

def cancel(update, context):
    """–û—Ç–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    keyboard = get_main_keyboard()
    update.message.reply_text(
        '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
        reply_markup=keyboard
    )
    return CHOOSING_ACTION

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è ÔøΩÔøΩ–æ–Ω–≤–µ—Ä—Ç–µ—Ä–∞
def converter_start(update, context):
    update.message.reply_text(
        "üí± –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∏ –≤–∞–ª—é—Ç—ã –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏\n"
        "–§–æ—Ä–º–∞—Ç: 100 USD TO RUB\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–ª—é—Ç—ã: USD, EUR, RUB, GBP –∏ –¥—Ä—É–≥–∏–µ"
    )
    return CONVERTER_INPUT

def handle_converter(update, context):
    try:
        text = update.message.text.strip().upper()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 100 USD TO RUB)
        parts = text.split()
        if len(parts) != 4 or parts[2] != 'TO':
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
            
        amount = float(parts[0])
        from_currency = parts[1]
        to_currency = parts[3]
        
        # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç
        url = f"https://api.exchangerate-api.com/v4/latest/{from_currency}"
        response = requests.get(url)
        rates = response.json()['rates']
        
        if to_currency not in rates:
            raise ValueError("–í–∞–ª—é—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º
        result = amount * rates[to_currency]
        
        update.message.reply_text(
            f"üí± –†–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:\n"
            f"{amount:.2f} {from_currency} = {result:.2f} {to_currency}"
        )
        
    except ValueError as e:
        update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –≤–≤–æ–¥–∞.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: 100 USD TO RUB"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–∞: {e}")
        update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏")
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é
    keyboard = get_main_keyboard()
    update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=keyboard)
    return CHOOSING_ACTION

def get_statistics(update, context):
    user_id = update.effective_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    total_income, total_expense = get_statistics_db(user_id)
    balance = total_income - total_expense
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    income_by_category = get_category_statistics(user_id, "income")
    expense_by_category = get_category_statistics(user_id, "expense")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n"
    message += f"üí∞ –û–±—â–∏–π –¥–æ—Ö–æ–¥: {total_income:.2f}\n"
    message += f"üí∏ –û–±ÔøΩÔøΩ–∏–π —Ä–∞—Å—Ö–æ–¥: {total_expense:.2f}\n"
    message += f"üí≥ –ë–∞–ª–∞–Ω—Å: {balance:.2f}\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –¥–æ—Ö–æ–¥–∞–º
    message += "üìà –î–æ—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:\n"
    for category, amount in income_by_category:
        category_name = [k for k, v in INCOME_CATEGORIES.items() if v == category][0]
        message += f"{category_name}: {amount:.2f}\n"
    
    message += "\nüìâ –†–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:\n"
    for category, amount in expense_by_category:
        category_name = [k for k, v in EXPENSE_CATEGORIES.items() if v == category][0]
        message += f"{category_name}: {amount:.2f}\n"
    
    update.message.reply_text(message, reply_markup=get_main_keyboard())
    return CHOOSING_ACTION

def show_history_menu(update, context):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –∏—Å—Ç–æ—Ä–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π"""
    keyboard = [
        ['üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏'],
        ['üìö –í—Å—è –∏—Å—Ç–æ—Ä–∏—è'],
        ['üì• –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV'],
        ['‚ùå –û—Ç–º–µ–Ω–∞']
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∏—Å—Ç–æ—Ä–∏–∏:', reply_markup=reply_markup)
    return HISTORY_CHOICE

def get_recent_history(update, context):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    user_id = update.effective_user.id
    transactions = get_transactions_history(user_id, limit=10)
    
    if not transactions:
        update.message.reply_text("üìã –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π –ø—É—Å—Ç–∞")
    else:
        message = "üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:\n\n"
        total_income = 0
        total_expense = 0
        
        for date, type_, amount in transactions:
            if type_ == "–î–æ—Ö–æ–¥":
                emoji = "üí∞"
                total_income += amount
            else:
                emoji = "üí∏"
                total_expense += amount
                
            message += f"{emoji} {date}\n"
            message += f"–¢–∏–ø: {type_}\n"
            message += f"–°—É–º–º–∞: {amount:,.2f} ‚ÇΩ\n"
            message += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–∏
        message += "\nüìä –ò—Ç–æ–≥–æ –∑–∞ –ø–µ—Ä–∏–æ–¥:\n"
        message += f"–î–æ—Ö–æ–¥—ã: {total_income:,.2f} ‚ÇΩ\n"
        message += f"–†–∞—Å—Ö–æ–¥—ã: {total_expense:,.2f} ‚ÇΩ\n"
        message += f"–ë–∞–ª–∞–Ω—Å: {(total_income - total_expense):,.2f} ‚ÇΩ"
        
        update.message.reply_text(message)
    
    keyboard = get_main_keyboard()
    update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=keyboard)
    return CHOOSING_ACTION

def get_full_history(update, context):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é –æ–ø–µ—Ä–∞—Ü–∏–π"""
    user_id = update.effective_user.id
    transactions = get_all_transactions_history(user_id)
    
    if not transactions:
        update.message.reply_text("üìö –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π –ø—É—Å—Ç–∞")
    else:
        message = "üìö –í—Å—è –∏—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π:\n\n"
        for date, type_, amount in transactions:
            emoji = "üí∞" if type_ == "income" else "üí∏"
            type_text = "–î–æ—Ö–æ–¥" if type_ == "income" else "–†–∞—Å—Ö–æ–¥"
            message += f"{emoji} {type_text}: {amount:.2f} —Ä—É–±. ({date})\n"
        
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, —Ä–∞–∑–±–∏–≤–∞–µ–º –µ–≥–æ –Ω–∞ —á–∞—Å—Ç–∏
        if len(message) > 4000:
            parts = [message[i:i+4000] for i in range(0, len(message), 4000)]
            for part in parts:
                update.message.reply_text(part)
        else:
            update.message.reply_text(message)
    
    keyboard = get_main_keyboard()
    update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=keyboard)
    return CHOOSING_ACTION

def export_history(update, context):
    """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –≤ CSV —Ñ–∞–π–ª"""
    user_id = update.effective_user.id
    
    try:
        file_path = export_to_csv(user_id)
        if file_path:
            with open(file_path, 'rb') as file:
                update.message.reply_document(
                    document=file,
                    filename='finance_history.csv',
                    caption='üì• –í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π'
                )
        else:
            update.message.reply_text("‚ùå –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π –ø—É—Å—Ç–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –≤ CSV: {e}")
        update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ")
    
    keyboard = get_main_keyboard()
    update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=keyboard)
    return CHOOSING_ACTION

def handle_calculator(update, context):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –∏ —É–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã
        expression = update.message.text.strip().replace(' ', '')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã
        allowed = set('0123456789+-*/()')
        if not set(expression).issubset(allowed):
            raise ValueError("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã")
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ
        def safe_eval(expr):
            # –ö–æ–º–ø–∏–ª–∏—Ä—É–µ–º –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ä–µ–∂–∏–º–µ 'eval'
            code = compile(expr, '<string>', 'eval')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ –≤—ã—Ä–∞–∂–µ–Ω–∏–∏ —Ç–æ–ª—å–∫–æ –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
            for name in code.co_names:
                if name not in {'abs', 'min', 'max'}:
                    raise NameError(f'–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ {name} –∑–∞–ø—Ä–µ—â–µ–Ω–æ')
            
            return eval(code)
        
        result = safe_eval(expression)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if isinstance(result, (int, float)):
            if float(result).is_integer():
                formatted_result = str(int(result))
            else:
                formatted_result = f"{result:.2f}"
            
            update.message.reply_text(f"üî¢ {expression} = {formatted_result}")
        else:
            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
            
    except (ValueError, SyntaxError, ZeroDivisionError, NameError):
        update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –≤ –≤—ã—Ä–∞–∂–µ–Ω–∏–∏.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã +, -, *, /, (, )\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 2+2*2"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞: {str(e)}")
        update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–∏")
    
    keyboard = get_main_keyboard()
    update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=keyboard)
    return CHOOSING_ACTION

def get_category_keyboard(trans_type, user_id):
    """–°–æ–∑–¥–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏"""
    categories = INCOME_CATEGORIES if trans_type == "income" else EXPENSE_CATEGORIES
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
    available_categories = dict(categories)
    
    # –ï—Å–ª–∏ —ç—Ç–æ –¥–æ—Ö–æ–¥ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ—Å–æ–±—ã–π - —É–¥–∞–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ–¥–∞—Ä–∫–æ–≤
    if trans_type == "income" and user_id != SPECIAL_USER_ID:
        available_categories = {k: v for k, v in categories.items() if v != 'gifts'}
    
    keyboard = [[category] for category in available_categories.keys()]
    keyboard.append(['‚ùå –û—Ç–º–µ–Ω–∞'])
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    init_db()
    
    # –ó–∞–º–µ–Ω–∏—Ç–µ YOUR_BOT_TOKEN –Ω–∞ –≤–∞—à —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω
    # –ù–∞–ø—Ä–∏–º–µ—Ä: "5555555555:AAHHHHzzzzzzzzzzzzzzzzzzzzzzzzzzz"
    updater = Updater("7303692897:AAH1-fxOntNfwZJiRiQ4b72ABlXTy_80y_0", use_context=True)
    
    # –ü–æ–ª—É—á–∞–µ–º dispatcher –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    dp = updater.dispatcher
    
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            CHOOSING_ACTION: [
                MessageHandler(Filters.regex('^üí∞ –î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥$'), income_start),
                MessageHandler(Filters.regex('^üí∏ –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥$'), expense_start),
                MessageHandler(Filters.regex('^üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞$'), get_statistics),
                MessageHandler(Filters.regex('^üìù –ò—Å—Ç–æ—Ä–∏—è$'), show_history_menu),
                MessageHandler(Filters.regex('^üí± –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∞–ª—é—Ç$'), converter_start),
                MessageHandler(Filters.regex('^üìà –ö—É—Ä—Å—ã –≤–∞ÔøΩÔøΩ—é—Ç$'), get_currency_rates),
                MessageHandler(Filters.regex('^üî¢ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä$'), calculator_start),
                MessageHandler(Filters.regex('^‚ùå –û—Ç–º–µ–Ω–∞$'), cancel),
            ],
            CHOOSING_INCOME_CATEGORY: [
                MessageHandler(Filters.regex('^‚ùå –û—Ç–º–µ–Ω–∞$'), cancel),
                MessageHandler(
                    Filters.text & ~Filters.command,
                    lambda update, context: category_selected(update, context, "income")
                ),
            ],
            CHOOSING_EXPENSE_CATEGORY: [
                MessageHandler(Filters.regex('^‚ùå –û—Ç–º–µ–Ω–∞$'), cancel),
                MessageHandler(
                    Filters.text & ~Filters.command,
                    lambda update, context: category_selected(update, context, "expense")
                ),
            ],
            ENTERING_AMOUNT: [
                MessageHandler(Filters.regex('^‚ùå –û—Ç–º–µ–Ω–∞$'), cancel),
                MessageHandler(Filters.text & ~Filters.command, handle_amount),
            ],
            HISTORY_CHOICE: [
                MessageHandler(Filters.regex('^üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏$'), get_recent_history),
                MessageHandler(Filters.regex('^üìö –í—Å—è –∏—Å—Ç–æ—Ä–∏—è$'), get_full_history),
                MessageHandler(Filters.regex('^üì• –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV$'), export_history),
                MessageHandler(Filters.regex('^‚ùå –û—Ç–º–µ–Ω–∞$'), cancel),
            ],
            CALCULATOR_INPUT: [
                MessageHandler(Filters.regex('^‚ùå –û—Ç–º–µ–Ω–∞$'), cancel),
                MessageHandler(Filters.text & ~Filters.command, handle_calculator),
            ],
            CONVERTER_INPUT: [
                MessageHandler(Filters.regex('^‚ùå –û—Ç–º–µ–Ω–∞$'), cancel),
                MessageHandler(Filters.text & ~Filters.command, handle_converter),
            ],
        },
        fallbacks=[CommandHandler('start', start)]
    )

    dp.add_handler(conv_handler)
    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()
